//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace AllocationsCRUD.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core;
    using System.Linq;
    
    public partial class BCATrade_devEntities : DbContext
    {
        public BCATrade_devEntities()
            : base("name=BCATrade_devEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public DbSet<Allocation> Allocations { get; set; }
        public DbSet<AllocationValue> AllocationValues { get; set; }
        public DbSet<Benchmark> Benchmarks { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<DurationType> DurationTypes { get; set; }
        public DbSet<Hedge_Type> Hedge_Type { get; set; }
        public DbSet<Instruction_Type> Instruction_Type { get; set; }
        public DbSet<Length_Type> Length_Type { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Measure_Type> Measure_Type { get; set; }
        public DbSet<Performance> Performances { get; set; }
        public DbSet<Portfolio> Portfolios { get; set; }
        public DbSet<PortfolioType> PortfolioTypes { get; set; }
        public DbSet<Position> Positions { get; set; }
        public DbSet<Related_Trade> Related_Trade { get; set; }
        public DbSet<Relativity> Relativities { get; set; }
        public DbSet<Service> Services { get; set; }
        public DbSet<Status> Status { get; set; }
        public DbSet<Structure_Type> Structure_Type { get; set; }
        public DbSet<Track_Record> Track_Record { get; set; }
        public DbSet<Track_Record_Type> Track_Record_Type { get; set; }
        public DbSet<Tradable_Thing> Tradable_Thing { get; set; }
        public DbSet<Tradable_Thing_Class> Tradable_Thing_Class { get; set; }
        public DbSet<Trade> Trades { get; set; }
        public DbSet<Trade_Comment> Trade_Comment { get; set; }
        public DbSet<Trade_Instruction> Trade_Instruction { get; set; }
        public DbSet<Trade_Line> Trade_Line { get; set; }
        public DbSet<Trade_Line_Group> Trade_Line_Group { get; set; }
        public DbSet<Trade_Line_Group_Type> Trade_Line_Group_Type { get; set; }
        public DbSet<WeightingDescription> WeightingDescriptions { get; set; }
        public DbSet<ActiveTradeSummary> ActiveTradeSummaries { get; set; }
        public DbSet<AllocationHistorySummary> AllocationHistorySummaries { get; set; }
        public DbSet<AllocationSummary> AllocationSummaries { get; set; }
        public DbSet<CommentSummary> CommentSummaries { get; set; }
        public DbSet<LinkedTrade> LinkedTrades { get; set; }
        public DbSet<PerformanceSummary> PerformanceSummaries { get; set; }
        public DbSet<PortfolioSummary> PortfolioSummaries { get; set; }
        public DbSet<TradeHistory> TradeHistories { get; set; }
        public DbSet<TradeLineSummary> TradeLineSummaries { get; set; }
        public DbSet<TradeLookupData> TradeLookupDatas { get; set; }
    
        [EdmFunction("BCATrade_devEntities", "spot_carry")]
        public virtual IQueryable<spot_carry_Result> spot_carry(Nullable<int> trade_id, Nullable<System.DateTime> spot_carry_date)
        {
            var trade_idParameter = trade_id.HasValue ?
                new ObjectParameter("trade_id", trade_id) :
                new ObjectParameter("trade_id", typeof(int));
    
            var spot_carry_dateParameter = spot_carry_date.HasValue ?
                new ObjectParameter("spot_carry_date", spot_carry_date) :
                new ObjectParameter("spot_carry_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<spot_carry_Result>("[BCATrade_devEntities].[spot_carry](@trade_id, @spot_carry_date)", trade_idParameter, spot_carry_dateParameter);
        }
    }
}
